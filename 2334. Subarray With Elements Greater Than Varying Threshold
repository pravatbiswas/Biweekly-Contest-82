class Solution:
    def validSubarraySize(self, nums: List[int], threshold: int) -> int:
        n = len(nums)
        
        parent = [i for i in range(n)]
        sz = [1 for i in range(n)]

        def root(x):
            if x == parent[x]:
                return x
            parent[x] = root(parent[x])
            return parent[x]

        def join(x, y):
            x, y = root(x), root(y)
            if x == y:
                return
            if sz[x] > sz[y]:
                x, y = y, x
            parent[x] = y
            sz[y] += sz[x]

        x = [(nums[i], i) for i in range(n)]
        x.sort(reverse=True)
        s = set()
        for e, i in x:
            s.add(i)
            if i-1 in s:
                join(i-1, i)
            if i+1 in s:
                join(i, i+1)
            cur = sz[root(i)]
            if threshold < e*cur:
                return cur
        return -1

